---
import Sidebar from '../components/Sidebar.astro';
import Footer from '../components/Footer.astro';
import TableOfContents from '../components/TableOfContents.astro';
import '../styles/global_settings.css';
import { format } from 'date-fns';

const { title, headings = [], currentPath } = Astro.props;
const isHomePage = currentPath === '/';
const currentDate = format(new Date(), 'MMMM dd, yyyy');
const currentTime = format(new Date(), 'HH:mm:ss');
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title || 'Portfolio Website'}</title>
    <link rel="stylesheet" href="/styles/global_settings.css" />
    <slot name="head" />
    
    <!-- Cat eye tracking script -->
    <script>
      document.addEventListener('mousemove', (e) => {
        const eyes = document.querySelectorAll('.cat-eye');
        if (!eyes.length) return;
        
        eyes.forEach(eye => {
          const rect = eye.parentElement.getBoundingClientRect();
          const eyeX = rect.left + rect.width / 2;
          const eyeY = rect.top + rect.height / 2;
          
          const angle = Math.atan2(e.clientY - eyeY, e.clientX - eyeX);
          const eyeMove = 3; // pixels the eyes can move
          
          const x = Math.cos(angle) * eyeMove;
          const y = Math.sin(angle) * eyeMove;
          eye.style.transform = `translate(${x}px, ${y}px)`;
        });
      });
    </script>
  </head>
  <body>
    <div class="min-h-screen bg-[#f0f0f0] md:pb-4 dark:bg-gray-900 flex flex-col">
      <!-- Navigation Bar - Always shown and sticky -->
      <nav class="sticky top-0 z-50 bg-white dark:bg-gray-800 rounded-full mx-auto px-4 sm:px-4 md:px-6 md:py-2 flex items-center justify-between mt-8 mb-6 shadow-lg">
        <div class="flex items-center space-x-4 overflow-x-auto mr-6 scrollbar-hide">
          {isHomePage ? (
            <>
              <a href="/" class={`hover:text-[#005ac8] dark:hover:text-[#1a6fd1] text-[0.8em] ${currentPath === '/' ? 'text-[#005ac8] dark:text-[#1a6fd1]' : 'dark:text-white'}`}>
                Home
              </a>
              <a href="/skills" class={`hover:text-[#005ac8] dark:hover:text-[#1a6fd1] text-[0.8em] ${currentPath === '/skills' ? 'text-[#005ac8] dark:text-[#1a6fd1]' : 'dark:text-white'}`}>
                Skills
              </a>
              <a href="/experience" class={`hover:text-[#005ac8] dark:hover:text-[#1a6fd1] text-[0.8em] ${currentPath === '/experience' ? 'text-[#005ac8] dark:text-[#1a6fd1]' : 'dark:text-white'}`}>
                Experience
              </a>
              <a href="/projects" class={`hover:text-[#005ac8] dark:hover:text-[#1a6fd1] text-[0.8em] ${currentPath === '/projects' ? 'text-[#005ac8] dark:text-[#1a6fd1]' : 'dark:text-white'}`}>
                Projects
              </a>
              {/* Add more navigation items here */}
            </>
          ) : (
            <div class="text-[0.8em] text-gray-600 dark:text-gray-300" id="current-time">{currentDate} | {currentTime}</div>
          )}
        </div>
      
        <div class="flex items-center space-x-4">
          {/* Cat eyes, theme toggle, social links */}
          <div class="cat-image relative w-10 h-5 bg-gray-100 dark:bg-gray-700 rounded-full overflow-hidden">
            <div class="cat-eye absolute top-[35%] left-[30%] w-2 h-2 bg-black dark:bg-white rounded-full"></div>
            <div class="cat-eye absolute top-[35%] right-[30%] w-2 h-2 bg-black dark:bg-white rounded-full"></div>
          </div>
          <button id="theme-toggle" class="p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="sun-icon hidden dark:inline-block dark:text-white">
              <circle cx="12" cy="12" r="5"></circle>
              <line x1="12" y1="1" x2="12" y2="3"></line>
              <line x1="12" y1="21" x2="12" y2="23"></line>
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
              <line x1="1" y1="12" x2="3" y2="12"></line>
              <line x1="21" y1="12" x2="23" y2="12"></line>
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="moon-icon inline-block dark:hidden">
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
            </svg>
          </button>
          <a href="https://github.com" aria-label="GitHub" target="_blank" rel="noopener" class="dark:text-white">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"></path>
              <path d="M9 18c-4.51 2-5-2-7-2"></path>
            </svg>
          </a>
          <a href="https://linkedin.com" aria-label="LinkedIn" target="_blank" rel="noopener" class="dark:text-white">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
              <rect width="4" height="12" x="2" y="9"></rect>
              <circle cx="4" cy="4" r="2"></circle>
            </svg>
          </a>
        </div>
      </nav>

      <!-- Main content area with scrollable sections -->
      <div class="flex-1 flex flex-col md:flex-row gap-6 my-6 px-4 md:px-8  h-screen">
        <!-- Sidebar - Scrollable -->
        <div id="sidebar-container" class="hidden md:block prose prose-invert dark:prose-dark md:w-72 md:flex-shrink-0">
          <Sidebar currentPath={currentPath} />
        </div>
        
        <!-- Main Content - Scrollable -->
        <div class="flex-1 flex flex-col ">
          <div class="flex flex-col md:flex-row flex-1 p-2 bg-white dark:bg-gray-800 rounded-lg mb-4 shadow-lg">
            <!-- Section 1: Content (Scrollable) -->
            <div class={`w-full ${isHomePage || !headings.length ? 'md:w-full' : 'md:w-3/4'} overflow-y-auto max-h-[calc(100vh)]`}>
              <div class="p-6 md:p-8">
                <div class="prose prose-invert dark:prose-dark max-w-none">
                  <slot />
                </div>
              </div>
            </div>
            
            <!-- Section 2: Table of Contents (Scrollable) -->
            {!isHomePage && headings.length > 0 && (
              <div class="w-full md:w-1/4 p-6 md:p-8 overflow-y-auto max-h-[calc(100vh)]">
                <TableOfContents headings={headings} />
              </div>
            )}
          </div>
        </div>
      </div>
      
      <!-- Footer -->
      <Footer />
    </div>
    
    <script>
      // Mobile menu toggle
      const mobileMenuButton = document.getElementById('mobile-menu-button');
      const mobileMenu = document.getElementById('mobile-menu');
      
      if (mobileMenuButton && mobileMenu) {
        mobileMenuButton.addEventListener('click', () => {
          mobileMenu.classList.toggle('hidden');
        });
      }
      
      // Update time every second
      function updateTime() {
        const timeElement = document.getElementById('current-time');
        if (timeElement) {
          const now = new Date();
          const options = { month: 'long', day: 'numeric', year: 'numeric' };
          const dateStr = now.toLocaleDateString('en-US', options);
          const hours = String(now.getHours()).padStart(2, '0');
          const minutes = String(now.getMinutes()).padStart(2, '0');
          const seconds = String(now.getSeconds()).padStart(2, '0');
          timeElement.textContent = `${dateStr} | ${hours}:${minutes}:${seconds}`;
        }
      }
      
      // Initial call and set interval
      updateTime();
      setInterval(updateTime, 1000);
      
      // Sidebar toggle for mobile
      const toggleSidebarButton = document.getElementById('toggle-sidebar');
      const sidebarContainer = document.getElementById('sidebar-container');
      
      if (toggleSidebarButton && sidebarContainer) {
        toggleSidebarButton.addEventListener('click', () => {
          sidebarContainer.classList.toggle('hidden');
        });
      }
      
      // Submenu toggles
      document.addEventListener('DOMContentLoaded', () => {
        const toggleButtons = document.querySelectorAll('.toggle-btn');
        
        toggleButtons.forEach(button => {
          button.addEventListener('click', () => {
            const submenu = button.nextElementSibling;
            
            if (submenu && submenu.classList.contains('submenu')) {
              if (!submenu.classList.contains('hidden')) {
                submenu.classList.add('hidden');
                const icon = button.querySelector('.toggle-icon');
                if (icon) {
                  icon.classList.remove('rotate-180');
                }
                return;
              }
              
              document.querySelectorAll('.submenu').forEach(menu => {
                if (menu !== submenu) {
                  menu.classList.add('hidden');
                  const parentButton = menu.previousElementSibling;
                  if (parentButton) {
                    const parentIcon = parentButton.querySelector('.toggle-icon');
                    if (parentIcon) {
                      parentIcon.classList.remove('rotate-180');
                    }
                  }
                }
              });
              
              submenu.classList.remove('hidden');
              const icon = button.querySelector('.toggle-icon');
              if (icon) {
                icon.classList.add('rotate-180');
              }
            }
          });
        });
      });
    
      // Theme toggle functionality
      document.addEventListener('DOMContentLoaded', () => {
        const themeToggle = document.getElementById('theme-toggle');
        
        // Check for saved theme preference or use system preference
        const savedTheme = localStorage.getItem('theme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
          document.documentElement.classList.add('dark');
        }
        
        // Toggle theme on click
        themeToggle.addEventListener('click', () => {
          document.documentElement.classList.toggle('dark');
          
          // Save preference
          if (document.documentElement.classList.contains('dark')) {
            localStorage.setItem('theme', 'dark');
          } else {
            localStorage.setItem('theme', 'light');
          }
        });
      });
    </script>
  </body>
</html>
